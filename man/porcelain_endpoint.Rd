% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/endpoint.R
\name{porcelain_endpoint}
\alias{porcelain_endpoint}
\title{Basic endpoint object}
\description{
Create a \code{porcelain_endpoint} object that collects
together an HTTP method (e.g., \code{GET}), a path (e.g.,
\code{/path}) and a target R function.  Unlike plumber
endpoints, porcelain endpoints are meant to be used in testing.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{method}}{HTTP method}

\item{\code{path}}{HTTP path}

\item{\code{target}}{R function used for the endpoint}

\item{\code{validate}}{Logical, indicating if response validation is used}

\item{\code{inputs}}{Input control}

\item{\code{state}}{Possibly mutable state}

\item{\code{returning}}{An \code{\link{porcelain_returning}} object
controlling the return type (content type, status code,
serialisation and validation information).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-porcelain_endpoint-new}{\code{porcelain_endpoint$new()}}
\item \href{#method-porcelain_endpoint-run}{\code{porcelain_endpoint$run()}}
\item \href{#method-porcelain_endpoint-request}{\code{porcelain_endpoint$request()}}
\item \href{#method-porcelain_endpoint-plumber}{\code{porcelain_endpoint$plumber()}}
\item \href{#method-porcelain_endpoint-create}{\code{porcelain_endpoint$create()}}
\item \href{#method-porcelain_endpoint-clone}{\code{porcelain_endpoint$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-porcelain_endpoint-new"></a>}}
\if{latex}{\out{\hypertarget{method-porcelain_endpoint-new}{}}}
\subsection{Method \code{new()}}{
Create an endpoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{porcelain_endpoint$new(method, path, target, ..., returning, validate = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{The HTTP method to support}

\item{\code{path}}{The server path for the endpoint}

\item{\code{target}}{An R function to run as the endpoint}

\item{\code{...}}{Additional parameters, currently representing
\emph{inputs}.  You can use the functions
\code{\link{porcelain_input_query}},
\code{\link{porcelain_input_body_binary}} and
\code{\link{porcelain_input_body_json}} to define inputs and pass
them into this method.  The names used must match those in
\code{target}.}

\item{\code{returning}}{Information about what the endpoint returns,
as created by \code{\link{porcelain_returning}}}

\item{\code{validate}}{Logical, indicating if any validation
(implemented by the \code{validate_response} argument) should
be enabled.  This should be set to \code{FALSE} in production
environments.  By default (if \code{validate} is \code{NULL}),
we look at the value of the environment \code{PORCELAIN_VALIDATE} -
if \code{true} (case insensitive) then we will validate.
This is intended to support easy use of validation on
continuous integration systems.}

\item{\code{validate_response}}{Optional function that throws an error
of the processed body is "invalid".}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-porcelain_endpoint-run"></a>}}
\if{latex}{\out{\hypertarget{method-porcelain_endpoint-run}{}}}
\subsection{Method \code{run()}}{
Run the endpoint.  This will produce a
standardised response object that contains \code{status_code},
\code{content_type}, \code{body} (the serialised output as run
through the \code{process} method and returned by plumber) and
\code{data} (the result of running the target function)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{porcelain_endpoint$run(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed through to the \code{target} function}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-porcelain_endpoint-request"></a>}}
\if{latex}{\out{\hypertarget{method-porcelain_endpoint-request}{}}}
\subsection{Method \code{request()}}{
Test the endpoint.  This creates a full plumber
object and serves one request to the endpoint.  Argument are as
passed through to \code{\link{porcelain}}'s \code{$request()}
method, except that \code{method} and \code{path} are
automatically taken from the endpoint itself.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{porcelain_endpoint$request(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed through to the \code{request} method
(\code{query}, \code{body} and \code{content_type}).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-porcelain_endpoint-plumber"></a>}}
\if{latex}{\out{\hypertarget{method-porcelain_endpoint-plumber}{}}}
\subsection{Method \code{plumber()}}{
Helper method for use with plumber - not designed
for end-user use.  This is what gets called by plumber when the
endpoint receives a request.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{porcelain_endpoint$plumber(req, res, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{req, res}}{Conventional plumber request/response objects}

\item{\code{...}}{Additional arguments passed through to \code{run}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-porcelain_endpoint-create"></a>}}
\if{latex}{\out{\hypertarget{method-porcelain_endpoint-create}{}}}
\subsection{Method \code{create()}}{
Create a plumber endpoint
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{porcelain_endpoint$create(envir, validate)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{envir}}{Environment as used by plumber (currently unclear)}

\item{\code{validate}}{Logical, allowing override of validation at the api
level.  This takes precedence over the value set when creating the
endpoint.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-porcelain_endpoint-clone"></a>}}
\if{latex}{\out{\hypertarget{method-porcelain_endpoint-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{porcelain_endpoint$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
